/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/content/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Applications
         * @description Get paginated applications
         */
        get: operations["GetApplications"];
        put?: never;
        /**
         * Upsert Application
         * @description It will insert the application if not present else it will update the matching entry
         */
        post: operations["UpsertApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/content/applications/upload/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upsert application source content
         * @description Upserts only application source content
         */
        post: operations["UpsertApplicationSourceContent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/content/applications/download/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application source content
         * @description Get application source content
         */
        get: operations["GetApplicationSourceContent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/content/applications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application by ID
         * @description Get application by ID
         */
        get: operations["GetApplication"];
        put?: never;
        post?: never;
        /**
         * Delete application by ID
         * @description Delete application associated with ID
         */
        delete: operations["DeleteApplication"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Capabilities
         * @deprecated
         * @description Get available capabilities for logged in user
         */
        get: operations["GetCapabilitie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{meshery-version}/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Capabilities By server version
         * @description Get available capabilities for logged in user
         */
        get: operations["GetCapabilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collaboration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Collaboration
         * @description Collaboration
         */
        get: operations["CollaborationHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connections
         * @description Get connections
         */
        get: operations["GetConnections"];
        put?: never;
        /**
         * Register Connection
         * @description Register with Meshery Cloud
         */
        post: operations["RegisterConnection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections/{connectionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Edit Connection by ID
         * @description Edit registered connection using the connection ID
         */
        put: operations["EditConnectionByID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get status of all connections
         * @description Get summary about the status of all connections
         */
        get: operations["GetConnectionStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections/{connectionKind}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connections by kind
         * @description Get connections by kind
         */
        get: operations["GetConnectionsByKind"];
        put?: never;
        post?: never;
        /**
         * Delete connection
         * @description Delete registered connection
         */
        delete: operations["DeleteConnection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections/{connectionKind}/{connectionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connections by kind and connectionID.
         * @description Get connections by kind (kind is required because this API returns the results in non std format of a connection)
         */
        get: operations["GetConnectionsByKindAndConnectionID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections/meshery/{mesheryServerID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Meshery connection
         * @description Deletes a given meshery connection. This is generally used for deleting connections from Meshery Server UI where UI is not aware of connection IDs.
         */
        delete: operations["DeleteMesheryConnection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/user/credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's credentials
         * @description Get all user's credentials for logged in user
         */
        get: operations["GetUserCredentials"];
        /**
         * Update credential
         * @description Update credentials for logged in user
         */
        put: operations["UpdateUserCredential"];
        /**
         * Create Credential
         * @description Create new credentials for logged in user
         */
        post: operations["SaveUserCredential"];
        /**
         * Delete user's credentials
         * @description Delete user's credentials (tombstoned records) for logged in user
         */
        delete: operations["DeleteUserCredential"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Events Aggregate
         * @description Get Events Aggreate Count
         */
        get: operations["GetEventsAggregate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/date": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Events by Date
         * @description Get Events by date
         */
        get: operations["RetrieveResultsByDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/week": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Events by Week
         * @description Get Events by week
         */
        get: operations["RetrieveResultsByWeek"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/month": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Events by Month
         * @description Get Events by month
         */
        get: operations["RetrieveResultsByMonth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * All Events
         * @description Get All events
         */
        get: operations["GetEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Events Summary
         * @description Get Events summary for a user
         */
        get: operations["GetEventSummaryByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/content/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Filters
         * @description Get paginated filters
         */
        get: operations["GetFilters"];
        put?: never;
        /**
         * Upsert Filter
         * @description It will insert the filter if not present else it will update the matching entry
         */
        post: operations["UpsertFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/content/filters/file/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter file
         * @description Get the filter associated with the given filter id without any metadata
         */
        get: operations["GetFilterFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/content/filters/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get filter by ID
         * @description Get filter by ID
         */
        get: operations["GetFilter"];
        put?: never;
        post?: never;
        /**
         * Delete filter by ID
         * @description Delete filter associated with ID
         */
        delete: operations["DeleteFilter"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/content/filters/clone/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone filter
         * @description Clone filter associated with ID
         */
        post: operations["CloneFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Roles
         * @description Get All supported roles
         */
        get: operations["GetAllRoles"];
        put?: never;
        /**
         * Assign role
         * @description Assign role to user
         */
        post: operations["AddRoleHolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/roles/edit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Edit Role
         * @description Edit role of user
         */
        post: operations["EditRoleHolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/roles/edit/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk Edit Role
         * @description Edit roles of user in bulk
         */
        post: operations["BulkEditRoleHolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Role
         * @description Edit roles of user in bulk
         */
        delete: operations["DeleteRole"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/performance/smp/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Performance Profiles
         * @description Get Performance Profiles for SMP Dashboard
         */
        get: operations["SMPDashboardPerfProfiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/performance/smp/profiles/{id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Performance Profiles Results by ID
         * @description Get Performance Profiles results by ID for SMP Dashboard
         */
        get: operations["SMPDashboardTestResults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/performance/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Performance Profiles
         * @description Get performance profiles
         */
        get: operations["GetPerformanceProfiles"];
        put?: never;
        /**
         * Upsert Performance Profiles
         * @description Update performance profiles or create a new performance profile if no id is provided
         */
        post: operations["UpsertPerformanceProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/performance/profiles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Performance Profile by Id
         * @description Get Performance Profile by ID
         */
        get: operations["GetPerformanceProfile"];
        put?: never;
        post?: never;
        /**
         * Delete Performance Profiles
         * @description Delete performance profiles by ID
         */
        delete: operations["DeletePerformanceProfile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/performance/profiles/{id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Performance Profiles result
         * @description Get paginated Performance Profiles result
         */
        get: operations["GetPerformanceProfileResults"];
        put?: never;
        /**
         * Add performance profiles result
         * @description Add performance profile result in given performance profile id
         */
        post: operations["AddPerformanceProfileResult"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/performance/profiles/{id}/results/{resultID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Performance Profiles result
         * @description Get the performance test result associated with the given profile id and with the given test id
         */
        get: operations["GetPerformanceProfileResult"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tokens
         * @description Get tokens associated with logged in user
         */
        get: operations["GetUserTokens"];
        put?: never;
        /**
         * Generate token for logged in user
         * @description Generates infinite token (i.e. tokens that do not expire) for the logged in user.
         */
        post: operations["GenerateToken"];
        /**
         * Delete token
         * @description Delete token for logged in user
         */
        delete: operations["DeleteUserTokens"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Infinite token
         * @description Get Infinite Token
         */
        get: operations["IssueIndefiniteLifetimeToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/users/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User Invite
         * @description Send invitation request to users
         */
        post: operations["HandleUserInvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/users/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * User Preference
         * @description Upsert user preferences
         */
        put: operations["UpdateUserPreference"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/users/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Keys
         * @description Get all keys based on roles assigned to user
         */
        get: operations["GetUserKeys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User by ID
         * @description Get specific user by user id
         */
        get: operations["GetUserById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/users/{delete_on}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete users
         * @description Delete users based on delete_for parameter
         */
        post: operations["DeleteUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/delete/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Delete account by ID
         * @description Delete account by ID
         */
        get: operations["DeleteUserAccountById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All users
         * @description Get All users
         */
        get: operations["GetRoleHolders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All users
         * @description Get All users
         */
        get: operations["GetUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/users/profile/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile by Id
         * @description Get user profile of given user Id
         */
        get: operations["GetUserProfileById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/users/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User details
         * @description Get user details for logged in user
         */
        get: operations["GetUser"];
        /**
         * Update Profile
         * @description Update user profile data (also updates kratos identity)
         */
        put: operations["UpdateProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/users/profile/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Profile Overview
         * @description Get Profile overview for logged in user
         */
        get: operations["GetProfileOverview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/users/{user_id}/profile/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * User Activity
         * @description Get last 10 user activities
         */
        get: operations["GetUserActivity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/users/online": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Online users
         * @description Get info of active / online users in last 24 hours
         */
        get: operations["GetRecentlyOnlineUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/identity/badges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets available badges
         * @description Gets available badges
         */
        get: operations["GetAvailableBadges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        mesheryApplication: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            user_id?: string;
            /** @description Application file */
            application_file?: string;
            /** @description Pattern Name */
            name?: string;
            location?: {
                [key: string]: string | undefined;
            };
            visibility?: string;
            /**
             * @description Source type (K8s manifest, Helm chart, Docker compose)
             * @enum {unknown}
             */
            source_type?: "k8s_manifest" | "docker_compose" | "helm_chart";
            /**
             * Format: byte
             * @description Source content
             */
            source_content?: string;
            catalog_data?: {
                [key: string]: string | undefined;
            };
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        mesheryApplicationPage: {
            resultType: "mesheryApplicationPage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            total_count?: number;
            resultType?: string;
        }, "resultType"> & {
            applications?: {
                /** Format: uuid */
                id?: string;
                /** Format: uuid */
                user_id?: string;
                /** @description Application file */
                application_file?: string;
                /** @description Pattern Name */
                name?: string;
                location?: {
                    [key: string]: string | undefined;
                };
                visibility?: string;
                /**
                 * @description Source type (K8s manifest, Helm chart, Docker compose)
                 * @enum {unknown}
                 */
                source_type?: "k8s_manifest" | "docker_compose" | "helm_chart";
                /**
                 * Format: byte
                 * @description Source content
                 */
                source_content?: string;
                catalog_data?: {
                    [key: string]: string | undefined;
                };
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
            }[];
        });
        resultsPage: {
            page?: number;
            page_size?: number;
            total_count?: number;
            resultType?: string;
        };
        /** Format: uuid */
        id: string;
        text: string;
        map_object: {
            [key: string]: string | undefined;
        };
        /** Format: date-time */
        time: string;
        /**
         * Format: byte
         * @description Source content
         */
        source_content: string;
        capability: {
            /** @description Provider type */
            provider_type?: string;
            /** @description Package version */
            package_version?: string;
            /** @description Package url */
            package_url?: string;
            /** @description Provider name */
            provider_name?: string;
            provider_description?: string[];
            extensions?: {
                navigator?: {
                    /** @description Title */
                    title?: string;
                    on_click_callback?: number;
                    href?: {
                        /** Format: uri */
                        uri?: string;
                        external?: boolean;
                    };
                    /** @description Component */
                    component?: string;
                    /** @description Icon link */
                    icon?: string;
                    /**
                     * Format: uri
                     * @description link
                     */
                    link?: string;
                    /** @description Controls whether to show the extension or not */
                    show?: boolean;
                    /** @description Extension type */
                    type?: string;
                    allowedTo?: Record<string, never>;
                }[];
                user_prefs?: {
                    /** @description Component */
                    component?: string;
                    /** @description Extension type */
                    type?: string;
                }[];
                graphql?: {
                    /** @description Component */
                    component?: string;
                    /** @description Path */
                    path?: string;
                    /** @description Extension type */
                    type?: string;
                }[];
                account?: {
                    /** @description Title */
                    title?: string;
                    on_click_callback?: number;
                    href?: {
                        /** Format: uri */
                        uri?: string;
                        external?: boolean;
                    };
                    /** @description Component */
                    component?: string;
                    /**
                     * Format: uri
                     * @description link
                     */
                    link?: string;
                    /** @description Controls whether to show the extension or not */
                    show?: boolean;
                    /** @description Extension type */
                    type?: string;
                }[];
            };
            capabilities?: {
                /** @description Feature name */
                feature?: string;
                endpoint?: string;
            };
            restrictedAccess?: {
                isMesheryUIRestricted?: boolean;
                allowedComponents?: {
                    navigator?: Record<string, never>;
                    header?: Record<string, never>;
                };
            };
        };
        capabilityNavigatorExtension: {
            /** @description Title */
            title?: string;
            on_click_callback?: number;
            href?: {
                /** Format: uri */
                uri?: string;
                external?: boolean;
            };
            /** @description Component */
            component?: string;
            /** @description Icon link */
            icon?: string;
            /**
             * Format: uri
             * @description link
             */
            link?: string;
            /** @description Controls whether to show the extension or not */
            show?: boolean;
            /** @description Extension type */
            type?: string;
            allowedTo?: Record<string, never>;
        };
        capabilityUserPrefExtension: {
            /** @description Component */
            component?: string;
            /** @description Extension type */
            type?: string;
        };
        capabilityGraphQLExtension: {
            /** @description Component */
            component?: string;
            /** @description Path */
            path?: string;
            /** @description Extension type */
            type?: string;
        };
        capabilitiesAccountExtension: {
            /** @description Title */
            title?: string;
            on_click_callback?: number;
            href?: {
                /** Format: uri */
                uri?: string;
                external?: boolean;
            };
            /** @description Component */
            component?: string;
            /**
             * Format: uri
             * @description link
             */
            link?: string;
            /** @description Controls whether to show the extension or not */
            show?: boolean;
            /** @description Extension type */
            type?: string;
        };
        restrictedAccess: {
            isMesheryUIRestricted?: boolean;
            allowedComponents?: {
                navigator?: Record<string, never>;
                header?: Record<string, never>;
            };
        };
        capabilityGeneralCapability: {
            /** @description Feature name */
            feature?: string;
            endpoint?: string;
        };
        capabilityExtension: {
            navigator?: {
                /** @description Title */
                title?: string;
                on_click_callback?: number;
                href?: {
                    /** Format: uri */
                    uri?: string;
                    external?: boolean;
                };
                /** @description Component */
                component?: string;
                /** @description Icon link */
                icon?: string;
                /**
                 * Format: uri
                 * @description link
                 */
                link?: string;
                /** @description Controls whether to show the extension or not */
                show?: boolean;
                /** @description Extension type */
                type?: string;
                allowedTo?: Record<string, never>;
            }[];
            user_prefs?: {
                /** @description Component */
                component?: string;
                /** @description Extension type */
                type?: string;
            }[];
            graphql?: {
                /** @description Component */
                component?: string;
                /** @description Path */
                path?: string;
                /** @description Extension type */
                type?: string;
            }[];
            account?: {
                /** @description Title */
                title?: string;
                on_click_callback?: number;
                href?: {
                    /** Format: uri */
                    uri?: string;
                    external?: boolean;
                };
                /** @description Component */
                component?: string;
                /**
                 * Format: uri
                 * @description link
                 */
                link?: string;
                /** @description Controls whether to show the extension or not */
                show?: boolean;
                /** @description Extension type */
                type?: string;
            }[];
        };
        /** @description One of (meshery-cloud, github, google) */
        provider: string;
        mesheryInstance: {
            /**
             * Format: uuid
             * @description Connection id
             */
            id?: string;
            /** @description Connection name */
            name?: string;
            /** @description Connected server id */
            server_id?: string;
            /** @description Running server version */
            server_version?: string;
            server_location?: string;
            /** @description Server build SHA */
            server_build_sha?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: date-time */
            deleted_at?: string;
            /** @description Status */
            status?: string;
        };
        connection: {
            /**
             * Format: uuid
             * @description ID
             */
            id?: string;
            /** @description Connection Name */
            name?: string;
            /**
             * Format: uuid
             * @description Credential ID
             */
            credential_id?: string;
            /** @description Connection Type */
            type?: string;
            /** @description Connection Subtype */
            sub_type?: string;
            /** @description Connection Kind */
            kind?: string;
            metadata?: {
                [key: string]: string | undefined;
            };
            /**
             * @description Connection Status
             * @enum {string}
             */
            status?: "discovered" | "registered" | "connected" | "ignored" | "maintenance" | "disconnected" | "deleted" | "not found";
            /** Format: uuid */
            user_id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: date-time */
            deleted_at?: string;
        };
        connectionPage: {
            resultType: "connectionPage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            total_count?: number;
            resultType?: string;
        }, "resultType"> & {
            connections?: {
                /**
                 * Format: uuid
                 * @description ID
                 */
                id?: string;
                /** @description Connection Name */
                name?: string;
                /**
                 * Format: uuid
                 * @description Credential ID
                 */
                credential_id?: string;
                /** @description Connection Type */
                type?: string;
                /** @description Connection Subtype */
                sub_type?: string;
                /** @description Connection Kind */
                kind?: string;
                metadata?: {
                    [key: string]: string | undefined;
                };
                /**
                 * @description Connection Status
                 * @enum {string}
                 */
                status?: "discovered" | "registered" | "connected" | "ignored" | "maintenance" | "disconnected" | "deleted" | "not found";
                /** Format: uuid */
                user_id?: string;
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
                /** Format: date-time */
                deleted_at?: string;
            }[];
        });
        connectionStatusInfo: {
            /** @description Connection status */
            status?: string;
            /** @description Number of connections having the status */
            count?: number;
        };
        connectionsStatusPage: {
            connections_status?: {
                /** @description Connection status */
                status?: string;
                /** @description Number of connections having the status */
                count?: number;
            }[];
        };
        k8sContext: {
            /** Format: uuid */
            id?: string;
            name?: string;
            auth?: {
                [key: string]: string | undefined;
            };
            cluster?: {
                [key: string]: string | undefined;
            };
            server?: string;
            /** Format: uuid */
            owner?: string;
            /** Format: uuid */
            created_by?: string;
            /** Format: uuid */
            meshery_instance_id?: string;
            /** Format: uuid */
            kubernetes_server_id?: string;
            deployment_type?: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: date-time */
            created_at?: string;
        };
        k8sContextPersistResponse: {
            k8sContext?: {
                /** Format: uuid */
                id?: string;
                name?: string;
                auth?: {
                    [key: string]: string | undefined;
                };
                cluster?: {
                    [key: string]: string | undefined;
                };
                server?: string;
                /** Format: uuid */
                owner?: string;
                /** Format: uuid */
                created_by?: string;
                /** Format: uuid */
                meshery_instance_id?: string;
                /** Format: uuid */
                kubernetes_server_id?: string;
                deployment_type?: string;
                /** Format: date-time */
                updated_at?: string;
                /** Format: date-time */
                created_at?: string;
            };
            inserted?: boolean;
        };
        credential: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            user_id?: string;
            name?: string;
            type?: string;
            secret?: {
                [key: string]: string | undefined;
            };
            /**
             * Format: date-time
             * @description Timestamp when the resource was created.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the resource was updated.
             */
            updated_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the resource was deleted.
             */
            deleted_at?: string;
        };
        credentialsPage: {
            resultType: "credentialsPage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            total_count?: number;
            resultType?: string;
        }, "resultType"> & {
            credential?: {
                /** Format: uuid */
                id?: string;
                /** Format: uuid */
                user_id?: string;
                name?: string;
                type?: string;
                secret?: {
                    [key: string]: string | undefined;
                };
                /**
                 * Format: date-time
                 * @description Timestamp when the resource was created.
                 */
                created_at?: string;
                /**
                 * Format: date-time
                 * @description Timestamp when the resource was updated.
                 */
                updated_at?: string;
                /**
                 * Format: date-time
                 * @description Timestamp when the resource was deleted.
                 */
                deleted_at?: string;
            }[];
        });
        /**
         * Format: date-time
         * @description Timestamp when the resource was created.
         */
        created_at: string;
        /**
         * Format: date-time
         * @description Timestamp when the resource was updated.
         */
        updated_at: string;
        /**
         * Format: date-time
         * @description Timestamp when the resource was deleted.
         */
        deleted_at: string;
        eventType: string;
        /** @description Defines model for event_trackers */
        event: {
            /**
             * Format: uuid
             * @description UUID of the event.
             *
             */
            id: string;
            /**
             * Format: uuid
             * @description UUID of the user that initiated the event. In most cases this would be present, but not always.
             *
             */
            user_id?: string;
            /**
             * Format: uuid
             * @description The system from which the request is sourced. In the case of Meshery Server,
             *     the ID is meshery_instance_id of Meshery Server (which can be found in the metadata of`Connections` table).
             *
             */
            system_id: string;
            /**
             * Format: uuid
             * @description Each Event will have a OperationID. This field is never NULL, which is to say an operation can result in series of events, for eg: Different stages of Pattern Engine / activities of Workflow engine. Each operation (and sub-operation) will have a different operation ID.
             *
             */
            operation_id: string;
            /**
             * @description Resource name on which the operation is invoked.
             *
             * @example pattern
             */
            category: string;
            /**
             * @description Action taken on the resource.
             *
             * @example deployed
             */
            action: string;
            /**
             * @description Status for the event.
             *
             * @enum {string}
             */
            status: "read" | "unread";
            /**
             * Format: uuid
             * @description UUID of the entity on which the event was performed.
             *
             * @example 110020-123230-434231-000213
             */
            acted_upon: string;
            /**
             * @description A summary/receipt of event that occured.
             *
             * @example “Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.
             */
            description: string;
            /**
             * @description A set of seven standard event levels.
             *
             * @example info
             * @enum {string}
             */
            severity: "emergency" | "critical" | "alert" | "error" | "warning" | "debug" | "informational" | "success";
            /** @description Contains meaningful information, specific to the type of event.
             *     Structure of metadata can be different for different events.
             *      */
            metadata: Record<string, never>;
            /**
             * Format: date-time
             * @description Timestamp when the resource was created.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Timestamp when the resource was updated.
             */
            updated_at: string;
            /**
             * Format: date-time
             * @description Timestamp when the resource was deleted.
             */
            deleted_at?: string;
        };
        events_filter: {
            provider: string[];
            category: string[];
            action: string[];
            severity: string[];
            limit: number;
            offset: number;
            /** @description Field on which records are sorted */
            sort_on: string;
            /** @description order of sort asc/desc, default is asc */
            order: string;
        };
        eventTrackerGrouped: {
            count?: number;
            event_type?: string;
            /** Format: date-time */
            dt?: string;
            week?: string;
            month?: string;
            year?: string;
        };
        eventTrackerGroupedArray: {
            count?: number;
            event_type?: string;
            /** Format: date-time */
            dt?: string;
            week?: string;
            month?: string;
            year?: string;
        }[];
        eventResult: {
            /** @description Defines model for event_trackers */
            event: {
                /**
                 * Format: uuid
                 * @description UUID of the event.
                 *
                 */
                id: string;
                /**
                 * Format: uuid
                 * @description UUID of the user that initiated the event. In most cases this would be present, but not always.
                 *
                 */
                user_id?: string;
                /**
                 * Format: uuid
                 * @description The system from which the request is sourced. In the case of Meshery Server,
                 *     the ID is meshery_instance_id of Meshery Server (which can be found in the metadata of`Connections` table).
                 *
                 */
                system_id: string;
                /**
                 * Format: uuid
                 * @description Each Event will have a OperationID. This field is never NULL, which is to say an operation can result in series of events, for eg: Different stages of Pattern Engine / activities of Workflow engine. Each operation (and sub-operation) will have a different operation ID.
                 *
                 */
                operation_id: string;
                /**
                 * @description Resource name on which the operation is invoked.
                 *
                 * @example pattern
                 */
                category: string;
                /**
                 * @description Action taken on the resource.
                 *
                 * @example deployed
                 */
                action: string;
                /**
                 * @description Status for the event.
                 *
                 * @enum {string}
                 */
                status: "read" | "unread";
                /**
                 * Format: uuid
                 * @description UUID of the entity on which the event was performed.
                 *
                 * @example 110020-123230-434231-000213
                 */
                acted_upon: string;
                /**
                 * @description A summary/receipt of event that occured.
                 *
                 * @example “Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.
                 */
                description: string;
                /**
                 * @description A set of seven standard event levels.
                 *
                 * @example info
                 * @enum {string}
                 */
                severity: "emergency" | "critical" | "alert" | "error" | "warning" | "debug" | "informational" | "success";
                /** @description Contains meaningful information, specific to the type of event.
                 *     Structure of metadata can be different for different events.
                 *      */
                metadata: Record<string, never>;
                /**
                 * Format: date-time
                 * @description Timestamp when the resource was created.
                 */
                created_at: string;
                /**
                 * Format: date-time
                 * @description Timestamp when the resource was updated.
                 */
                updated_at: string;
                /**
                 * Format: date-time
                 * @description Timestamp when the resource was deleted.
                 */
                deleted_at?: string;
            };
            events_count: number;
        };
        eventsPage: {
            recordType: "eventsPage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            records_total?: number;
            recordType?: string;
        }, "recordType"> & {
            data?: {
                /** @description Defines model for event_trackers */
                event: {
                    /**
                     * Format: uuid
                     * @description UUID of the event.
                     *
                     */
                    id: string;
                    /**
                     * Format: uuid
                     * @description UUID of the user that initiated the event. In most cases this would be present, but not always.
                     *
                     */
                    user_id?: string;
                    /**
                     * Format: uuid
                     * @description The system from which the request is sourced. In the case of Meshery Server,
                     *     the ID is meshery_instance_id of Meshery Server (which can be found in the metadata of`Connections` table).
                     *
                     */
                    system_id: string;
                    /**
                     * Format: uuid
                     * @description Each Event will have a OperationID. This field is never NULL, which is to say an operation can result in series of events, for eg: Different stages of Pattern Engine / activities of Workflow engine. Each operation (and sub-operation) will have a different operation ID.
                     *
                     */
                    operation_id: string;
                    /**
                     * @description Resource name on which the operation is invoked.
                     *
                     * @example pattern
                     */
                    category: string;
                    /**
                     * @description Action taken on the resource.
                     *
                     * @example deployed
                     */
                    action: string;
                    /**
                     * @description Status for the event.
                     *
                     * @enum {string}
                     */
                    status: "read" | "unread";
                    /**
                     * Format: uuid
                     * @description UUID of the entity on which the event was performed.
                     *
                     * @example 110020-123230-434231-000213
                     */
                    acted_upon: string;
                    /**
                     * @description A summary/receipt of event that occured.
                     *
                     * @example “Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.
                     */
                    description: string;
                    /**
                     * @description A set of seven standard event levels.
                     *
                     * @example info
                     * @enum {string}
                     */
                    severity: "emergency" | "critical" | "alert" | "error" | "warning" | "debug" | "informational" | "success";
                    /** @description Contains meaningful information, specific to the type of event.
                     *     Structure of metadata can be different for different events.
                     *      */
                    metadata: Record<string, never>;
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was created.
                     */
                    created_at: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was updated.
                     */
                    updated_at: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was deleted.
                     */
                    deleted_at?: string;
                };
                events_count: number;
            }[];
        });
        eventSummary: {
            /** @description user's email or username */
            user_id: string;
            provider: string;
            email: string;
            /** @description First Name */
            first_name: string;
            /** @description Last Name */
            last_name: string;
            activity_count: number;
            login_count: number;
            signup_count: number;
            perf_results_count: number;
            smi_results_count: number;
            meshery_apps_count: number;
            meshery_patterns_count: number;
            meshery_filters_count: number;
            /** Format: data-time */
            last_login_time: string;
        };
        eventSummaryPage: {
            recordType: "eventSummaryPage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            records_total?: number;
            recordType?: string;
        }, "recordType"> & {
            data?: {
                /** @description user's email or username */
                user_id: string;
                provider: string;
                email: string;
                /** @description First Name */
                first_name: string;
                /** @description Last Name */
                last_name: string;
                activity_count: number;
                login_count: number;
                signup_count: number;
                perf_results_count: number;
                smi_results_count: number;
                meshery_apps_count: number;
                meshery_patterns_count: number;
                meshery_filters_count: number;
                /** Format: data-time */
                last_login_time: string;
            }[];
        });
        eventsAggregate: {
            /** @description Number of audit events */
            audit?: number;
            /** @description Number of summary events */
            summary?: number;
        };
        recordsPage: {
            page?: number;
            page_size?: number;
            records_total?: number;
            recordType?: string;
        };
        /** Format: uuid */
        user_uuid: string;
        /** Format: uuid */
        system_id: string;
        /** Format: uuid */
        operation_id: string;
        mesheryFilter: {
            /**
             * Format: uuid
             * @description Connection id
             */
            id?: string;
            /** Format: uuid */
            user_id?: string;
            /**
             * Format: byte
             * @description Filter file
             */
            filter_file?: string;
            /** @description Filter Name */
            name?: string;
            location?: {
                [key: string]: string | undefined;
            };
            visibility?: string;
            catalog_data?: {
                [key: string]: string | undefined;
            };
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        mesheryFilterPage: {
            resultType: "mesheryFilterPage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            total_count?: number;
            resultType?: string;
        }, "resultType"> & {
            filters?: {
                /**
                 * Format: uuid
                 * @description Connection id
                 */
                id?: string;
                /** Format: uuid */
                user_id?: string;
                /**
                 * Format: byte
                 * @description Filter file
                 */
                filter_file?: string;
                /** @description Filter Name */
                name?: string;
                location?: {
                    [key: string]: string | undefined;
                };
                visibility?: string;
                catalog_data?: {
                    [key: string]: string | undefined;
                };
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
            }[];
        });
        /**
         * Format: byte
         * @description Filter file
         */
        filter_file: string;
        roleHolderRequest: {
            role_names: string[];
            /**
             * Format: email
             * @description email
             */
            email: string;
        };
        role: {
            /** Format: uuid */
            id: string;
            /** @description user's email or username */
            user_id: string;
            username: string;
            /**
             * Format: email
             * @description email
             */
            email: string;
            /** @description First Name */
            first_name: string;
            /** @description Last Name */
            last_name: string;
            status: string;
            role_names: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            last_login_time: string;
            /** Format: date-time */
            deleted_at: string;
            prefs?: {
                welcome_email?: boolean;
                notify_role_change?: boolean;
            };
        };
        roleNames: string[];
        /**
         * Format: email
         * @description email
         */
        email: string;
        /** @description user's email or username */
        user_id: string;
        username: string;
        status: string;
        email_preference: {
            welcome_email?: boolean;
            notify_role_change?: boolean;
        };
        performanceProfile: {
            /** Format: uuid */
            id?: string;
            name?: string;
            /** Format: uuid */
            user_id?: string;
            /** Format: uuid */
            schedule?: string;
            load_generators?: string;
            endpoints?: string;
            service_mesh?: string;
            concurrent_request?: number;
            qps?: number;
            duration?: string;
            /** Format: date-time */
            last_run?: string;
            total_results?: number;
            request_headers?: string;
            request_cookies?: string;
            request_body?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        performanceProfilePage: {
            resultType: "performanceProfilePage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            total_count?: number;
            resultType?: string;
        }, "resultType"> & {
            profiles?: {
                /** Format: uuid */
                id?: string;
                name?: string;
                /** Format: uuid */
                user_id?: string;
                /** Format: uuid */
                schedule?: string;
                load_generators?: string;
                endpoints?: string;
                service_mesh?: string;
                concurrent_request?: number;
                qps?: number;
                duration?: string;
                /** Format: date-time */
                last_run?: string;
                total_results?: number;
                request_headers?: string;
                request_cookies?: string;
                request_body?: string;
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
            }[];
        });
        performanceResult: {
            /** Format: uuid */
            id?: string;
            name?: string;
            /** Format: date-time */
            test_start_time?: string;
            mesh?: string;
            runner_results?: {
                [key: string]: string | undefined;
            };
            deleted?: boolean;
            server_metrics?: {
                [key: string]: string | undefined;
            };
            server_board_config?: {
                [key: string]: string | undefined;
            };
            /** Format: uuid */
            performance_profile?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        mesheryResultPage: {
            resultType: "mesheryResultPage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            total_count?: number;
            resultType?: string;
        }, "resultType"> & {
            results?: {
                /** Format: uuid */
                id?: string;
                name?: string;
                /** Format: date-time */
                test_start_time?: string;
                mesh?: string;
                runner_results?: {
                    [key: string]: string | undefined;
                };
                deleted?: boolean;
                server_metrics?: {
                    [key: string]: string | undefined;
                };
                server_board_config?: {
                    [key: string]: string | undefined;
                };
                /** Format: uuid */
                performance_profile?: string;
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
            }[];
        });
        tokenPage: {
            resultType: "tokenPage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            total_count?: number;
            resultType?: string;
        }, "resultType"> & {
            tokens?: {
                /** Format: uuid */
                id?: string;
                /** Format: uuid */
                user_id?: string;
                /** @description One of (meshery-cloud, github, google) */
                provider?: string;
                access_token?: string;
                refresh_token?: string;
                name?: string;
                purpose?: string;
                is_oauth?: boolean;
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
            }[];
        });
        userToken: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            user_id?: string;
            /** @description One of (meshery-cloud, github, google) */
            provider?: string;
            access_token?: string;
            refresh_token?: string;
            name?: string;
            purpose?: string;
            is_oauth?: boolean;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        userInvite: {
            /** @description First Name */
            first_name: string;
            /** @description Last Name */
            last_name: string;
            /**
             * Format: email
             * @description email
             */
            email: string;
        };
        bulkDelete: {
            /** Format: uuid */
            user_ids: string;
            user_emails: string[];
        };
        user: {
            /** Format: uuid */
            id: string;
            /** @description user's email or username */
            user_id: string;
            /** @description One of (meshery-cloud, github, google) */
            provider: string;
            /**
             * Format: email
             * @description email
             */
            email: string;
            /** @description First Name */
            first_name: string;
            /** @description Last Name */
            last_name: string;
            /** @description Link for profile picture */
            avatar_url?: string;
            status: string;
            bio?: string;
            preferences?: {
                [key: string]: string | undefined;
            };
            accepted_terms_at?: string;
            /** Format: date-time */
            first_login_time?: string;
            /** Format: date-time */
            last_login_time: string;
        };
        recentUsers: {
            /** Format: uuid */
            id?: string;
            /** @description First Name */
            first_name?: string;
            /** @description Last Name */
            last_name?: string;
            /** @description Link for profile picture */
            avatar_url?: string;
        };
        rolesPage: {
            recordType: "rolesPage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            records_total?: number;
            recordType?: string;
        }, "recordType"> & {
            data?: {
                /** Format: uuid */
                id: string;
                /** @description user's email or username */
                user_id: string;
                username: string;
                /**
                 * Format: email
                 * @description email
                 */
                email: string;
                /** @description First Name */
                first_name: string;
                /** @description Last Name */
                last_name: string;
                status: string;
                role_names: string[];
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: date-time */
                last_login_time: string;
                /** Format: date-time */
                deleted_at: string;
                prefs?: {
                    welcome_email?: boolean;
                    notify_role_change?: boolean;
                };
            }[];
        });
        key: {
            /** Format: uuid */
            ID?: string;
            subcategory?: string;
            function?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** @description SQL null Timestamp to handle null values of time. */
            deleted_at?: string;
            category?: string;
            description?: string;
            /** Format: uuid */
            owner?: string;
        };
        userKeys: {
            keys?: {
                /** Format: uuid */
                ID?: string;
                subcategory?: string;
                function?: string;
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
                /** @description SQL null Timestamp to handle null values of time. */
                deleted_at?: string;
                category?: string;
                description?: string;
                /** Format: uuid */
                owner?: string;
            }[];
            total_count?: number;
        };
        /** @enum {string} */
        deleteOn: "self" | "bulk";
        usersPageForAdmin: {
            recordType: "usersPageForAdmin";
        } & (Omit<{
            page?: number;
            page_size?: number;
            records_total?: number;
            recordType?: string;
        }, "recordType"> & {
            data?: {
                /** Format: uuid */
                id: string;
                /** @description user's email or username */
                user_id: string;
                username: string;
                /**
                 * Format: email
                 * @description email
                 */
                email: string;
                /** @description First Name */
                first_name: string;
                /** @description Last Name */
                last_name: string;
                status: string;
                role_names: string[];
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: date-time */
                last_login_time: string;
                /** Format: date-time */
                deleted_at: string;
                prefs?: {
                    welcome_email?: boolean;
                    notify_role_change?: boolean;
                };
                /** @description Link for profile picture */
                avatar_url?: string;
                preferences?: {
                    [key: string]: string | undefined;
                };
            }[];
        });
        usersWithRolesForAdmin: {
            /** Format: uuid */
            id: string;
            /** @description user's email or username */
            user_id: string;
            username: string;
            /**
             * Format: email
             * @description email
             */
            email: string;
            /** @description First Name */
            first_name: string;
            /** @description Last Name */
            last_name: string;
            status: string;
            role_names: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            last_login_time: string;
            /** Format: date-time */
            deleted_at: string;
            prefs?: {
                welcome_email?: boolean;
                notify_role_change?: boolean;
            };
            /** @description Link for profile picture */
            avatar_url?: string;
            preferences?: {
                [key: string]: string | undefined;
            };
        };
        teamMembers: {
            /** Format: uuid */
            id: string;
            /** @description user's email or username */
            user_id: string;
            username: string;
            /**
             * Format: email
             * @description email
             */
            email: string;
            /** @description First Name */
            first_name: string;
            /** @description Last Name */
            last_name: string;
            status: string;
            role_names: string[];
            /** Format: date-time */
            joined_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            last_login_time: string;
            /** Format: date-time */
            deleted_at: string;
            prefs?: {
                welcome_email?: boolean;
                notify_role_change?: boolean;
            };
            /** @description Link for profile picture */
            avatar_url?: string;
        };
        teamMembersPage: {
            recordType: "teamMembersPage";
        } & (Omit<{
            page?: number;
            page_size?: number;
            records_total?: number;
            recordType?: string;
        }, "recordType"> & {
            data?: {
                /** Format: uuid */
                id: string;
                /** @description user's email or username */
                user_id: string;
                username: string;
                /**
                 * Format: email
                 * @description email
                 */
                email: string;
                /** @description First Name */
                first_name: string;
                /** @description Last Name */
                last_name: string;
                status: string;
                role_names: string[];
                /** Format: date-time */
                joined_at: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: date-time */
                last_login_time: string;
                /** Format: date-time */
                deleted_at: string;
                prefs?: {
                    welcome_email?: boolean;
                    notify_role_change?: boolean;
                };
                /** @description Link for profile picture */
                avatar_url?: string;
            }[];
        });
        usersForNonAdmin: {
            /** Format: uuid */
            id: string;
            /** @description user's email or username */
            user_id: string;
            username: string;
            /**
             * Format: email
             * @description email
             */
            email: string;
            /** @description First Name */
            first_name: string;
            /** @description Last Name */
            last_name: string;
            prefs?: {
                welcome_email?: boolean;
                notify_role_change?: boolean;
            };
            /** @description Link for profile picture */
            avatar_url?: string;
            preferences?: {
                [key: string]: string | undefined;
            };
        };
        usersPageForNonAdmin: {
            recordType: "usersPageForNonAdmin";
        } & (Omit<{
            page?: number;
            page_size?: number;
            records_total?: number;
            recordType?: string;
        }, "recordType"> & {
            data?: {
                /** Format: uuid */
                id: string;
                /** @description user's email or username */
                user_id: string;
                username: string;
                /**
                 * Format: email
                 * @description email
                 */
                email: string;
                /** @description First Name */
                first_name: string;
                /** @description Last Name */
                last_name: string;
                prefs?: {
                    welcome_email?: boolean;
                    notify_role_change?: boolean;
                };
                /** @description Link for profile picture */
                avatar_url?: string;
                preferences?: {
                    [key: string]: string | undefined;
                };
            }[];
        });
        recentActivityPage: {
            recent_activity?: {
                /**
                 * Format: uuid
                 * @description UUID of the event.
                 *
                 */
                id: string;
                /**
                 * Format: uuid
                 * @description UUID of the user that initiated the event. In most cases this would be present, but not always.
                 *
                 */
                user_id?: string;
                /**
                 * Format: uuid
                 * @description The system from which the request is sourced. In the case of Meshery Server,
                 *     the ID is meshery_instance_id of Meshery Server (which can be found in the metadata of`Connections` table).
                 *
                 */
                system_id: string;
                /**
                 * Format: uuid
                 * @description Each Event will have a OperationID. This field is never NULL, which is to say an operation can result in series of events, for eg: Different stages of Pattern Engine / activities of Workflow engine. Each operation (and sub-operation) will have a different operation ID.
                 *
                 */
                operation_id: string;
                /**
                 * @description Resource name on which the operation is invoked.
                 *
                 * @example pattern
                 */
                category: string;
                /**
                 * @description Action taken on the resource.
                 *
                 * @example deployed
                 */
                action: string;
                /**
                 * @description Status for the event.
                 *
                 * @enum {string}
                 */
                status: "read" | "unread";
                /**
                 * Format: uuid
                 * @description UUID of the entity on which the event was performed.
                 *
                 * @example 110020-123230-434231-000213
                 */
                acted_upon: string;
                /**
                 * @description A summary/receipt of event that occured.
                 *
                 * @example “Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.
                 */
                description: string;
                /**
                 * @description A set of seven standard event levels.
                 *
                 * @example info
                 * @enum {string}
                 */
                severity: "emergency" | "critical" | "alert" | "error" | "warning" | "debug" | "informational" | "success";
                /** @description Contains meaningful information, specific to the type of event.
                 *     Structure of metadata can be different for different events.
                 *      */
                metadata: Record<string, never>;
                /**
                 * Format: date-time
                 * @description Timestamp when the resource was created.
                 */
                created_at: string;
                /**
                 * Format: date-time
                 * @description Timestamp when the resource was updated.
                 */
                updated_at: string;
                /**
                 * Format: date-time
                 * @description Timestamp when the resource was deleted.
                 */
                deleted_at?: string;
            }[];
        };
        accountOverview: {
            k8s_count?: number;
            app_count?: number;
            pattern_count?: number;
        };
        badge: {
            /** Format: uuid */
            id?: string;
            name?: string;
            description?: string;
            label?: string;
            svg_location?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** @description SQL null Timestamp to handle null values of time. */
            deleted_at?: string;
        };
        badges: {
            badges?: {
                [key: string]: {
                    /** Format: uuid */
                    id?: string;
                    name?: string;
                    description?: string;
                    label?: string;
                    svg_location?: string;
                    /** Format: date-time */
                    created_at?: string;
                    /** Format: date-time */
                    updated_at?: string;
                    /** @description SQL null Timestamp to handle null values of time. */
                    deleted_at?: string;
                } | undefined;
            };
            total_count?: number;
        };
        /** @description SQL null Timestamp to handle null values of time. */
        nullTime: string;
        /** @description Link for profile picture */
        avatar_url: string;
        bio: string;
        accepted_terms_at: string;
        emails: string[];
        /** @description Body for empty request */
        empty: Record<string, never>;
    };
    responses: {
        /** @description ok */
        200: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": string;
            };
        };
        /** @description created */
        201: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": string;
            };
        };
        /** @description Invalid request body or request param */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": string;
            };
        };
        /** @description Expired JWT token used or insufficient privilege */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": string;
            };
        };
        /** @description Result not found */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": string;
            };
        };
        /** @description Internal server error */
        500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": string;
            };
        };
    };
    parameters: {
        /** @description Get reponses by page */
        page: string;
        /** @description Get reponses by pageSize */
        page_size: string;
        /** @description Get responses that match search param value */
        search: string;
        /** @description Get ordered responses */
        order: string;
        /** @description Unique identifier */
        id: string;
        /** @description user's os */
        os: string;
        /** @description Is playground mode */
        playground: string;
        /** @description meshery version */
        mesheryVersion: string;
        /** @description Connection kind (eg: Meshery) */
        connectionKind: string;
        /** @description Connection ID */
        connectionId: string;
        /** @description Meshery server ID */
        serverId: string;
        /** @description credential Id */
        credentialId: string;
        /** @description Cumulative events */
        cumulative: string;
        /** @description Filter for retrieving events */
        eventsFilter: {
            provider?: string[];
            event_type?: string[];
        };
        /** @description Result id */
        resultId: string;
        /** @description Performance Result Id */
        resultID: string;
        /** @description To get OAuth tokens as well */
        isOAuth: string;
        /** @description Name of the resource */
        name: string;
        /** @description Purpose for which token is generated */
        purpose: string;
        /** @description User's user_id */
        userId: string;
        /** @description Remote provider */
        provider: string;
        /** @description Defines on whom the delete operation is to be performed */
        deleteOn: "self" | "bulk";
        /** @description Get filtered reponses */
        filter: string;
    };
    requestBodies: {
        mesheryApplicationRequestBody: {
            content: {
                "application/json": {
                    url?: string;
                    path?: string;
                    save?: boolean;
                    application_data?: {
                        /** Format: uuid */
                        id?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /** @description Application file */
                        application_file?: string;
                        /** @description Pattern Name */
                        name?: string;
                        location?: {
                            [key: string]: string | undefined;
                        };
                        visibility?: string;
                        /**
                         * @description Source type (K8s manifest, Helm chart, Docker compose)
                         * @enum {unknown}
                         */
                        source_type?: "k8s_manifest" | "docker_compose" | "helm_chart";
                        /**
                         * Format: byte
                         * @description Source content
                         */
                        source_content?: string;
                        catalog_data?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                    source_type?: string;
                };
            };
        };
        connectionPayload: {
            content: {
                "application/json": {
                    /** @description Kind */
                    kind?: string;
                    /** @description Connection type */
                    type?: string;
                    /** @description Connection subtype */
                    sub_type?: string;
                    credential_secret?: {
                        [key: string]: string | undefined;
                    };
                    metadata?: {
                        [key: string]: string | undefined;
                    };
                };
            };
        };
        /** @description Body for user credential */
        credentialBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    id?: string;
                    /** Format: uuid */
                    user_id?: string;
                    name?: string;
                    type?: string;
                    secret?: {
                        [key: string]: string | undefined;
                    };
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was created.
                     */
                    created_at?: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was updated.
                     */
                    updated_at?: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was deleted.
                     */
                    deleted_at?: string;
                };
            };
        };
        mesheryFilterRequestBody: {
            content: {
                "application/json": {
                    url?: string;
                    path?: string;
                    save?: boolean;
                    filter_data?: {
                        /**
                         * Format: uuid
                         * @description Connection id
                         */
                        id?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /**
                         * Format: byte
                         * @description Filter file
                         */
                        filter_file?: string;
                        /** @description Filter Name */
                        name?: string;
                        location?: {
                            [key: string]: string | undefined;
                        };
                        visibility?: string;
                        catalog_data?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                };
            };
        };
        /** @description Body for user invite request */
        userInvite: {
            content: {
                "application/json": {
                    /** @description First Name */
                    first_name: string;
                    /** @description Last Name */
                    last_name: string;
                    /**
                     * Format: email
                     * @description email
                     */
                    email: string;
                };
            };
        };
        /** @description Body for delete of user accounts */
        deleteUsers: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    user_ids: string;
                    user_emails: string[];
                } | Record<string, never>;
            };
        };
        /** @description Body for upserting user */
        user: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    id: string;
                    /** @description user's email or username */
                    user_id: string;
                    /** @description One of (meshery-cloud, github, google) */
                    provider: string;
                    /**
                     * Format: email
                     * @description email
                     */
                    email: string;
                    /** @description First Name */
                    first_name: string;
                    /** @description Last Name */
                    last_name: string;
                    /** @description Link for profile picture */
                    avatar_url?: string;
                    status: string;
                    bio?: string;
                    preferences?: {
                        [key: string]: string | undefined;
                    };
                    accepted_terms_at?: string;
                    /** Format: date-time */
                    first_login_time?: string;
                    /** Format: date-time */
                    last_login_time: string;
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetApplications: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Applications */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        total_count?: number;
                        resultType?: string;
                    }, "resultType"> & {
                        applications?: {
                            /** Format: uuid */
                            id?: string;
                            /** Format: uuid */
                            user_id?: string;
                            /** @description Application file */
                            application_file?: string;
                            /** @description Pattern Name */
                            name?: string;
                            location?: {
                                [key: string]: string | undefined;
                            };
                            visibility?: string;
                            /**
                             * @description Source type (K8s manifest, Helm chart, Docker compose)
                             * @enum {unknown}
                             */
                            source_type?: "k8s_manifest" | "docker_compose" | "helm_chart";
                            /**
                             * Format: byte
                             * @description Source content
                             */
                            source_content?: string;
                            catalog_data?: {
                                [key: string]: string | undefined;
                            };
                            /** Format: date-time */
                            created_at?: string;
                            /** Format: date-time */
                            updated_at?: string;
                        }[];
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    UpsertApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    url?: string;
                    path?: string;
                    save?: boolean;
                    application_data?: {
                        /** Format: uuid */
                        id?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /** @description Application file */
                        application_file?: string;
                        /** @description Pattern Name */
                        name?: string;
                        location?: {
                            [key: string]: string | undefined;
                        };
                        visibility?: string;
                        /**
                         * @description Source type (K8s manifest, Helm chart, Docker compose)
                         * @enum {unknown}
                         */
                        source_type?: "k8s_manifest" | "docker_compose" | "helm_chart";
                        /**
                         * Format: byte
                         * @description Source content
                         */
                        source_content?: string;
                        catalog_data?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                    source_type?: string;
                };
            };
        };
        responses: {
            /** @description Upserted application */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /** @description Application file */
                        application_file?: string;
                        /** @description Pattern Name */
                        name?: string;
                        location?: {
                            [key: string]: string | undefined;
                        };
                        visibility?: string;
                        /**
                         * @description Source type (K8s manifest, Helm chart, Docker compose)
                         * @enum {unknown}
                         */
                        source_type?: "k8s_manifest" | "docker_compose" | "helm_chart";
                        /**
                         * Format: byte
                         * @description Source content
                         */
                        source_content?: string;
                        catalog_data?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    }[];
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    UpsertApplicationSourceContent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        /** @description Body for upserting meshery application source content */
        requestBody: {
            content: {
                "text/plain": string;
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetApplicationSourceContent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description application source content associated with ID */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description application associated with ID */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /** @description Application file */
                        application_file?: string;
                        /** @description Pattern Name */
                        name?: string;
                        location?: {
                            [key: string]: string | undefined;
                        };
                        visibility?: string;
                        /**
                         * @description Source type (K8s manifest, Helm chart, Docker compose)
                         * @enum {unknown}
                         */
                        source_type?: "k8s_manifest" | "docker_compose" | "helm_chart";
                        /**
                         * Format: byte
                         * @description Source content
                         */
                        source_content?: string;
                        catalog_data?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    DeleteApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted application */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /** @description Application file */
                        application_file?: string;
                        /** @description Pattern Name */
                        name?: string;
                        location?: {
                            [key: string]: string | undefined;
                        };
                        visibility?: string;
                        /**
                         * @description Source type (K8s manifest, Helm chart, Docker compose)
                         * @enum {unknown}
                         */
                        source_type?: "k8s_manifest" | "docker_compose" | "helm_chart";
                        /**
                         * Format: byte
                         * @description Source content
                         */
                        source_content?: string;
                        catalog_data?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetCapabilitie: {
        parameters: {
            query?: {
                /** @description user's os */
                os?: string;
                /** @description Is playground mode */
                playground?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description capabilities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Provider type */
                        provider_type?: string;
                        /** @description Package version */
                        package_version?: string;
                        /** @description Package url */
                        package_url?: string;
                        /** @description Provider name */
                        provider_name?: string;
                        provider_description?: string[];
                        extensions?: {
                            navigator?: {
                                /** @description Title */
                                title?: string;
                                on_click_callback?: number;
                                href?: {
                                    /** Format: uri */
                                    uri?: string;
                                    external?: boolean;
                                };
                                /** @description Component */
                                component?: string;
                                /** @description Icon link */
                                icon?: string;
                                /**
                                 * Format: uri
                                 * @description link
                                 */
                                link?: string;
                                /** @description Controls whether to show the extension or not */
                                show?: boolean;
                                /** @description Extension type */
                                type?: string;
                                allowedTo?: Record<string, never>;
                            }[];
                            user_prefs?: {
                                /** @description Component */
                                component?: string;
                                /** @description Extension type */
                                type?: string;
                            }[];
                            graphql?: {
                                /** @description Component */
                                component?: string;
                                /** @description Path */
                                path?: string;
                                /** @description Extension type */
                                type?: string;
                            }[];
                            account?: {
                                /** @description Title */
                                title?: string;
                                on_click_callback?: number;
                                href?: {
                                    /** Format: uri */
                                    uri?: string;
                                    external?: boolean;
                                };
                                /** @description Component */
                                component?: string;
                                /**
                                 * Format: uri
                                 * @description link
                                 */
                                link?: string;
                                /** @description Controls whether to show the extension or not */
                                show?: boolean;
                                /** @description Extension type */
                                type?: string;
                            }[];
                        };
                        capabilities?: {
                            /** @description Feature name */
                            feature?: string;
                            endpoint?: string;
                        };
                        restrictedAccess?: {
                            isMesheryUIRestricted?: boolean;
                            allowedComponents?: {
                                navigator?: Record<string, never>;
                                header?: Record<string, never>;
                            };
                        };
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetCapabilities: {
        parameters: {
            query?: {
                /** @description user's os */
                os?: string;
                /** @description Is playground mode */
                playground?: string;
            };
            header?: never;
            path: {
                /** @description meshery version */
                "meshery-version": string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description capabilities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Provider type */
                        provider_type?: string;
                        /** @description Package version */
                        package_version?: string;
                        /** @description Package url */
                        package_url?: string;
                        /** @description Provider name */
                        provider_name?: string;
                        provider_description?: string[];
                        extensions?: {
                            navigator?: {
                                /** @description Title */
                                title?: string;
                                on_click_callback?: number;
                                href?: {
                                    /** Format: uri */
                                    uri?: string;
                                    external?: boolean;
                                };
                                /** @description Component */
                                component?: string;
                                /** @description Icon link */
                                icon?: string;
                                /**
                                 * Format: uri
                                 * @description link
                                 */
                                link?: string;
                                /** @description Controls whether to show the extension or not */
                                show?: boolean;
                                /** @description Extension type */
                                type?: string;
                                allowedTo?: Record<string, never>;
                            }[];
                            user_prefs?: {
                                /** @description Component */
                                component?: string;
                                /** @description Extension type */
                                type?: string;
                            }[];
                            graphql?: {
                                /** @description Component */
                                component?: string;
                                /** @description Path */
                                path?: string;
                                /** @description Extension type */
                                type?: string;
                            }[];
                            account?: {
                                /** @description Title */
                                title?: string;
                                on_click_callback?: number;
                                href?: {
                                    /** Format: uri */
                                    uri?: string;
                                    external?: boolean;
                                };
                                /** @description Component */
                                component?: string;
                                /**
                                 * Format: uri
                                 * @description link
                                 */
                                link?: string;
                                /** @description Controls whether to show the extension or not */
                                show?: boolean;
                                /** @description Extension type */
                                type?: string;
                            }[];
                        };
                        capabilities?: {
                            /** @description Feature name */
                            feature?: string;
                            endpoint?: string;
                        };
                        restrictedAccess?: {
                            isMesheryUIRestricted?: boolean;
                            allowedComponents?: {
                                navigator?: Record<string, never>;
                                header?: Record<string, never>;
                            };
                        };
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    CollaborationHandler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description initate cross server collaboration */
            101: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetConnections: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of connections */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        total_count?: number;
                        resultType?: string;
                    }, "resultType"> & {
                        connections?: {
                            /**
                             * Format: uuid
                             * @description ID
                             */
                            id?: string;
                            /** @description Connection Name */
                            name?: string;
                            /**
                             * Format: uuid
                             * @description Credential ID
                             */
                            credential_id?: string;
                            /** @description Connection Type */
                            type?: string;
                            /** @description Connection Subtype */
                            sub_type?: string;
                            /** @description Connection Kind */
                            kind?: string;
                            metadata?: {
                                [key: string]: string | undefined;
                            };
                            /**
                             * @description Connection Status
                             * @enum {string}
                             */
                            status?: "discovered" | "registered" | "connected" | "ignored" | "maintenance" | "disconnected" | "deleted" | "not found";
                            /** Format: uuid */
                            user_id?: string;
                            /** Format: date-time */
                            created_at?: string;
                            /** Format: date-time */
                            updated_at?: string;
                            /** Format: date-time */
                            deleted_at?: string;
                        }[];
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    RegisterConnection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Kind */
                    kind?: string;
                    /** @description Connection type */
                    type?: string;
                    /** @description Connection subtype */
                    sub_type?: string;
                    credential_secret?: {
                        [key: string]: string | undefined;
                    };
                    metadata?: {
                        [key: string]: string | undefined;
                    };
                };
            };
        };
        responses: {
            /** @description Inserted connection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description ID
                         */
                        id?: string;
                        /** @description Connection Name */
                        name?: string;
                        /**
                         * Format: uuid
                         * @description Credential ID
                         */
                        credential_id?: string;
                        /** @description Connection Type */
                        type?: string;
                        /** @description Connection Subtype */
                        sub_type?: string;
                        /** @description Connection Kind */
                        kind?: string;
                        metadata?: {
                            [key: string]: string | undefined;
                        };
                        /**
                         * @description Connection Status
                         * @enum {string}
                         */
                        status?: "discovered" | "registered" | "connected" | "ignored" | "maintenance" | "disconnected" | "deleted" | "not found";
                        /** Format: uuid */
                        user_id?: string;
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                        /** Format: date-time */
                        deleted_at?: string;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    EditConnectionByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Connection ID */
                connectionId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Kind */
                    kind?: string;
                    /** @description Connection type */
                    type?: string;
                    /** @description Connection subtype */
                    sub_type?: string;
                    credential_secret?: {
                        [key: string]: string | undefined;
                    };
                    metadata?: {
                        [key: string]: string | undefined;
                    };
                };
            };
        };
        responses: {
            /** @description Edited connection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description ID
                         */
                        id?: string;
                        /** @description Connection Name */
                        name?: string;
                        /**
                         * Format: uuid
                         * @description Credential ID
                         */
                        credential_id?: string;
                        /** @description Connection Type */
                        type?: string;
                        /** @description Connection Subtype */
                        sub_type?: string;
                        /** @description Connection Kind */
                        kind?: string;
                        metadata?: {
                            [key: string]: string | undefined;
                        };
                        /**
                         * @description Connection Status
                         * @enum {string}
                         */
                        status?: "discovered" | "registered" | "connected" | "ignored" | "maintenance" | "disconnected" | "deleted" | "not found";
                        /** Format: uuid */
                        user_id?: string;
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                        /** Format: date-time */
                        deleted_at?: string;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetConnectionStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Status of connections */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        connections_status?: {
                            /** @description Connection status */
                            status?: string;
                            /** @description Number of connections having the status */
                            count?: number;
                        }[];
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetConnectionsByKind: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path: {
                /** @description Connection kind (eg: Meshery) */
                connectionKind: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Connections by kind */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    DeleteConnection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Connection kind (eg: Meshery) */
                connectionKind: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted connection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description ID
                         */
                        id?: string;
                        /** @description Connection Name */
                        name?: string;
                        /**
                         * Format: uuid
                         * @description Credential ID
                         */
                        credential_id?: string;
                        /** @description Connection Type */
                        type?: string;
                        /** @description Connection Subtype */
                        sub_type?: string;
                        /** @description Connection Kind */
                        kind?: string;
                        metadata?: {
                            [key: string]: string | undefined;
                        };
                        /**
                         * @description Connection Status
                         * @enum {string}
                         */
                        status?: "discovered" | "registered" | "connected" | "ignored" | "maintenance" | "disconnected" | "deleted" | "not found";
                        /** Format: uuid */
                        user_id?: string;
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                        /** Format: date-time */
                        deleted_at?: string;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetConnectionsByKindAndConnectionID: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path: {
                /** @description Connection kind (eg: Meshery) */
                connectionKind: string;
                /** @description Connection ID */
                connectionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Connections by kind */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        k8sContext?: {
                            /** Format: uuid */
                            id?: string;
                            name?: string;
                            auth?: {
                                [key: string]: string | undefined;
                            };
                            cluster?: {
                                [key: string]: string | undefined;
                            };
                            server?: string;
                            /** Format: uuid */
                            owner?: string;
                            /** Format: uuid */
                            created_by?: string;
                            /** Format: uuid */
                            meshery_instance_id?: string;
                            /** Format: uuid */
                            kubernetes_server_id?: string;
                            deployment_type?: string;
                            /** Format: date-time */
                            updated_at?: string;
                            /** Format: date-time */
                            created_at?: string;
                        };
                        inserted?: boolean;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    DeleteMesheryConnection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Meshery server ID */
                mesheryServerID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetUserCredentials: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description credentials */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        total_count?: number;
                        resultType?: string;
                    }, "resultType"> & {
                        credential?: {
                            /** Format: uuid */
                            id?: string;
                            /** Format: uuid */
                            user_id?: string;
                            name?: string;
                            type?: string;
                            secret?: {
                                [key: string]: string | undefined;
                            };
                            /**
                             * Format: date-time
                             * @description Timestamp when the resource was created.
                             */
                            created_at?: string;
                            /**
                             * Format: date-time
                             * @description Timestamp when the resource was updated.
                             */
                            updated_at?: string;
                            /**
                             * Format: date-time
                             * @description Timestamp when the resource was deleted.
                             */
                            deleted_at?: string;
                        }[];
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    UpdateUserCredential: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Body for user credential */
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    id?: string;
                    /** Format: uuid */
                    user_id?: string;
                    name?: string;
                    type?: string;
                    secret?: {
                        [key: string]: string | undefined;
                    };
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was created.
                     */
                    created_at?: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was updated.
                     */
                    updated_at?: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was deleted.
                     */
                    deleted_at?: string;
                };
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    SaveUserCredential: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Body for user credential */
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    id?: string;
                    /** Format: uuid */
                    user_id?: string;
                    name?: string;
                    type?: string;
                    secret?: {
                        [key: string]: string | undefined;
                    };
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was created.
                     */
                    created_at?: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was updated.
                     */
                    updated_at?: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the resource was deleted.
                     */
                    deleted_at?: string;
                };
            };
        };
        responses: {
            /** @description created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    DeleteUserCredential: {
        parameters: {
            query: {
                /** @description credential Id */
                credential_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetEventsAggregate: {
        parameters: {
            query?: {
                /** @description Cumulative events */
                cumulative?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Events Aggregate Count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Number of audit events */
                        audit?: number;
                        /** @description Number of summary events */
                        summary?: number;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    RetrieveResultsByDate: {
        parameters: {
            query?: {
                /** @description Cumulative events */
                cumulative?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Events by date */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        count?: number;
                        event_type?: string;
                        /** Format: date-time */
                        dt?: string;
                        week?: string;
                        month?: string;
                        year?: string;
                    }[];
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    RetrieveResultsByWeek: {
        parameters: {
            query?: {
                /** @description Cumulative events */
                cumulative?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Events by week */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        count?: number;
                        event_type?: string;
                        /** Format: date-time */
                        dt?: string;
                        week?: string;
                        month?: string;
                        year?: string;
                    }[];
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    RetrieveResultsByMonth: {
        parameters: {
            query?: {
                /** @description Cumulative events */
                cumulative?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Events by month */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        count?: number;
                        event_type?: string;
                        /** Format: date-time */
                        dt?: string;
                        week?: string;
                        month?: string;
                        year?: string;
                    }[];
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetEvents: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
                /** @description Filter for retrieving events */
                filter?: {
                    provider?: string[];
                    event_type?: string[];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Events list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        records_total?: number;
                        recordType?: string;
                    }, "recordType"> & {
                        data?: {
                            /** @description Defines model for event_trackers */
                            event: {
                                /**
                                 * Format: uuid
                                 * @description UUID of the event.
                                 *
                                 */
                                id: string;
                                /**
                                 * Format: uuid
                                 * @description UUID of the user that initiated the event. In most cases this would be present, but not always.
                                 *
                                 */
                                user_id?: string;
                                /**
                                 * Format: uuid
                                 * @description The system from which the request is sourced. In the case of Meshery Server,
                                 *     the ID is meshery_instance_id of Meshery Server (which can be found in the metadata of`Connections` table).
                                 *
                                 */
                                system_id: string;
                                /**
                                 * Format: uuid
                                 * @description Each Event will have a OperationID. This field is never NULL, which is to say an operation can result in series of events, for eg: Different stages of Pattern Engine / activities of Workflow engine. Each operation (and sub-operation) will have a different operation ID.
                                 *
                                 */
                                operation_id: string;
                                /**
                                 * @description Resource name on which the operation is invoked.
                                 *
                                 * @example pattern
                                 */
                                category: string;
                                /**
                                 * @description Action taken on the resource.
                                 *
                                 * @example deployed
                                 */
                                action: string;
                                /**
                                 * @description Status for the event.
                                 *
                                 * @enum {string}
                                 */
                                status: "read" | "unread";
                                /**
                                 * Format: uuid
                                 * @description UUID of the entity on which the event was performed.
                                 *
                                 * @example 110020-123230-434231-000213
                                 */
                                acted_upon: string;
                                /**
                                 * @description A summary/receipt of event that occured.
                                 *
                                 * @example “Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.
                                 */
                                description: string;
                                /**
                                 * @description A set of seven standard event levels.
                                 *
                                 * @example info
                                 * @enum {string}
                                 */
                                severity: "emergency" | "critical" | "alert" | "error" | "warning" | "debug" | "informational" | "success";
                                /** @description Contains meaningful information, specific to the type of event.
                                 *     Structure of metadata can be different for different events.
                                 *      */
                                metadata: Record<string, never>;
                                /**
                                 * Format: date-time
                                 * @description Timestamp when the resource was created.
                                 */
                                created_at: string;
                                /**
                                 * Format: date-time
                                 * @description Timestamp when the resource was updated.
                                 */
                                updated_at: string;
                                /**
                                 * Format: date-time
                                 * @description Timestamp when the resource was deleted.
                                 */
                                deleted_at?: string;
                            };
                            events_count: number;
                        }[];
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetEventSummaryByUser: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Events Summary */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        records_total?: number;
                        recordType?: string;
                    }, "recordType"> & {
                        data?: {
                            /** @description user's email or username */
                            user_id: string;
                            provider: string;
                            email: string;
                            /** @description First Name */
                            first_name: string;
                            /** @description Last Name */
                            last_name: string;
                            activity_count: number;
                            login_count: number;
                            signup_count: number;
                            perf_results_count: number;
                            smi_results_count: number;
                            meshery_apps_count: number;
                            meshery_patterns_count: number;
                            meshery_filters_count: number;
                            /** Format: data-time */
                            last_login_time: string;
                        }[];
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetFilters: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        total_count?: number;
                        resultType?: string;
                    }, "resultType"> & {
                        filters?: {
                            /**
                             * Format: uuid
                             * @description Connection id
                             */
                            id?: string;
                            /** Format: uuid */
                            user_id?: string;
                            /**
                             * Format: byte
                             * @description Filter file
                             */
                            filter_file?: string;
                            /** @description Filter Name */
                            name?: string;
                            location?: {
                                [key: string]: string | undefined;
                            };
                            visibility?: string;
                            catalog_data?: {
                                [key: string]: string | undefined;
                            };
                            /** Format: date-time */
                            created_at?: string;
                            /** Format: date-time */
                            updated_at?: string;
                        }[];
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    UpsertFilter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    url?: string;
                    path?: string;
                    save?: boolean;
                    filter_data?: {
                        /**
                         * Format: uuid
                         * @description Connection id
                         */
                        id?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /**
                         * Format: byte
                         * @description Filter file
                         */
                        filter_file?: string;
                        /** @description Filter Name */
                        name?: string;
                        location?: {
                            [key: string]: string | undefined;
                        };
                        visibility?: string;
                        catalog_data?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Upserted filter */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description Connection id
                         */
                        id?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /**
                         * Format: byte
                         * @description Filter file
                         */
                        filter_file?: string;
                        /** @description Filter Name */
                        name?: string;
                        location?: {
                            [key: string]: string | undefined;
                        };
                        visibility?: string;
                        catalog_data?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    }[];
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetFilterFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filter file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetFilter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filter associated with ID */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description Connection id
                         */
                        id?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /**
                         * Format: byte
                         * @description Filter file
                         */
                        filter_file?: string;
                        /** @description Filter Name */
                        name?: string;
                        location?: {
                            [key: string]: string | undefined;
                        };
                        visibility?: string;
                        catalog_data?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    DeleteFilter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted filter */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description Connection id
                         */
                        id?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /**
                         * Format: byte
                         * @description Filter file
                         */
                        filter_file?: string;
                        /** @description Filter Name */
                        name?: string;
                        location?: {
                            [key: string]: string | undefined;
                        };
                        visibility?: string;
                        catalog_data?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    CloneFilter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        /** @description Body for cloning design */
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                };
            };
        };
        responses: {
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetAllRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all roles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    AddRoleHolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Body for assigning role to the user */
        requestBody: {
            content: {
                "application/json": {
                    role_names: string[];
                    /**
                     * Format: email
                     * @description email
                     */
                    email: string;
                };
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    EditRoleHolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Body for editing role of the user */
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    id: string;
                    /** @description user's email or username */
                    user_id: string;
                    username: string;
                    /**
                     * Format: email
                     * @description email
                     */
                    email: string;
                    /** @description First Name */
                    first_name: string;
                    /** @description Last Name */
                    last_name: string;
                    status: string;
                    role_names: string[];
                    /** Format: date-time */
                    created_at: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: date-time */
                    last_login_time: string;
                    /** Format: date-time */
                    deleted_at: string;
                    prefs?: {
                        welcome_email?: boolean;
                        notify_role_change?: boolean;
                    };
                };
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    BulkEditRoleHolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Body for editing role of the users in bulk */
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    id: string;
                    /** @description user's email or username */
                    user_id: string;
                    username: string;
                    /**
                     * Format: email
                     * @description email
                     */
                    email: string;
                    /** @description First Name */
                    first_name: string;
                    /** @description Last Name */
                    last_name: string;
                    status: string;
                    role_names: string[];
                    /** Format: date-time */
                    created_at: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: date-time */
                    last_login_time: string;
                    /** Format: date-time */
                    deleted_at: string;
                    prefs?: {
                        welcome_email?: boolean;
                        notify_role_change?: boolean;
                    };
                }[];
            };
        };
        responses: {
            /** @description created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    DeleteRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted roles */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id: string;
                        /** @description user's email or username */
                        user_id: string;
                        username: string;
                        /**
                         * Format: email
                         * @description email
                         */
                        email: string;
                        /** @description First Name */
                        first_name: string;
                        /** @description Last Name */
                        last_name: string;
                        status: string;
                        role_names: string[];
                        /** Format: date-time */
                        created_at: string;
                        /** Format: date-time */
                        updated_at: string;
                        /** Format: date-time */
                        last_login_time: string;
                        /** Format: date-time */
                        deleted_at: string;
                        prefs?: {
                            welcome_email?: boolean;
                            notify_role_change?: boolean;
                        };
                    }[];
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    SMPDashboardPerfProfiles: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get Performance Profiles with pagination */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        total_count?: number;
                        resultType?: string;
                    }, "resultType"> & {
                        profiles?: {
                            /** Format: uuid */
                            id?: string;
                            name?: string;
                            /** Format: uuid */
                            user_id?: string;
                            /** Format: uuid */
                            schedule?: string;
                            load_generators?: string;
                            endpoints?: string;
                            service_mesh?: string;
                            concurrent_request?: number;
                            qps?: number;
                            duration?: string;
                            /** Format: date-time */
                            last_run?: string;
                            total_results?: number;
                            request_headers?: string;
                            request_cookies?: string;
                            request_body?: string;
                            /** Format: date-time */
                            created_at?: string;
                            /** Format: date-time */
                            updated_at?: string;
                        }[];
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    SMPDashboardTestResults: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get Performance Profiles Results with pagination */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        total_count?: number;
                        resultType?: string;
                    }, "resultType"> & {
                        results?: {
                            /** Format: uuid */
                            id?: string;
                            name?: string;
                            /** Format: date-time */
                            test_start_time?: string;
                            mesh?: string;
                            runner_results?: {
                                [key: string]: string | undefined;
                            };
                            deleted?: boolean;
                            server_metrics?: {
                                [key: string]: string | undefined;
                            };
                            server_board_config?: {
                                [key: string]: string | undefined;
                            };
                            /** Format: uuid */
                            performance_profile?: string;
                            /** Format: date-time */
                            created_at?: string;
                            /** Format: date-time */
                            updated_at?: string;
                        }[];
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Invalid path parameter "id" */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetPerformanceProfiles: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Performance Profiles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        total_count?: number;
                        resultType?: string;
                    }, "resultType"> & {
                        profiles?: {
                            /** Format: uuid */
                            id?: string;
                            name?: string;
                            /** Format: uuid */
                            user_id?: string;
                            /** Format: uuid */
                            schedule?: string;
                            load_generators?: string;
                            endpoints?: string;
                            service_mesh?: string;
                            concurrent_request?: number;
                            qps?: number;
                            duration?: string;
                            /** Format: date-time */
                            last_run?: string;
                            total_results?: number;
                            request_headers?: string;
                            request_cookies?: string;
                            request_body?: string;
                            /** Format: date-time */
                            created_at?: string;
                            /** Format: date-time */
                            updated_at?: string;
                        }[];
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    UpsertPerformanceProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Body for upserting performance profile */
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    id?: string;
                    name?: string;
                    /** Format: uuid */
                    user_id?: string;
                    /** Format: uuid */
                    schedule?: string;
                    load_generators?: string;
                    endpoints?: string;
                    service_mesh?: string;
                    concurrent_request?: number;
                    qps?: number;
                    duration?: string;
                    /** Format: date-time */
                    last_run?: string;
                    total_results?: number;
                    request_headers?: string;
                    request_cookies?: string;
                    request_body?: string;
                    /** Format: date-time */
                    created_at?: string;
                    /** Format: date-time */
                    updated_at?: string;
                };
            };
        };
        responses: {
            /** @description updated performance profile */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id?: string;
                        name?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /** Format: uuid */
                        schedule?: string;
                        load_generators?: string;
                        endpoints?: string;
                        service_mesh?: string;
                        concurrent_request?: number;
                        qps?: number;
                        duration?: string;
                        /** Format: date-time */
                        last_run?: string;
                        total_results?: number;
                        request_headers?: string;
                        request_cookies?: string;
                        request_body?: string;
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetPerformanceProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Performance Profile for provided performance profile id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id?: string;
                        name?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /** Format: uuid */
                        schedule?: string;
                        load_generators?: string;
                        endpoints?: string;
                        service_mesh?: string;
                        concurrent_request?: number;
                        qps?: number;
                        duration?: string;
                        /** Format: date-time */
                        last_run?: string;
                        total_results?: number;
                        request_headers?: string;
                        request_cookies?: string;
                        request_body?: string;
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    DeletePerformanceProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted Performance Profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id?: string;
                        name?: string;
                        /** Format: uuid */
                        user_id?: string;
                        /** Format: uuid */
                        schedule?: string;
                        load_generators?: string;
                        endpoints?: string;
                        service_mesh?: string;
                        concurrent_request?: number;
                        qps?: number;
                        duration?: string;
                        /** Format: date-time */
                        last_run?: string;
                        total_results?: number;
                        request_headers?: string;
                        request_cookies?: string;
                        request_body?: string;
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Result not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetPerformanceProfileResults: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Performance Profile results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        total_count?: number;
                        resultType?: string;
                    }, "resultType"> & {
                        results?: {
                            /** Format: uuid */
                            id?: string;
                            name?: string;
                            /** Format: date-time */
                            test_start_time?: string;
                            mesh?: string;
                            runner_results?: {
                                [key: string]: string | undefined;
                            };
                            deleted?: boolean;
                            server_metrics?: {
                                [key: string]: string | undefined;
                            };
                            server_board_config?: {
                                [key: string]: string | undefined;
                            };
                            /** Format: uuid */
                            performance_profile?: string;
                            /** Format: date-time */
                            created_at?: string;
                            /** Format: date-time */
                            updated_at?: string;
                        }[];
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    AddPerformanceProfileResult: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        /** @description Body for adding perfor mance profile result */
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    id?: string;
                    name?: string;
                    /** Format: date-time */
                    test_start_time?: string;
                    mesh?: string;
                    runner_results?: {
                        [key: string]: string | undefined;
                    };
                    deleted?: boolean;
                    server_metrics?: {
                        [key: string]: string | undefined;
                    };
                    server_board_config?: {
                        [key: string]: string | undefined;
                    };
                    /** Format: uuid */
                    performance_profile?: string;
                    /** Format: date-time */
                    created_at?: string;
                    /** Format: date-time */
                    updated_at?: string;
                };
            };
        };
        responses: {
            /** @description Performance Profile results */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id?: string;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetPerformanceProfileResult: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
                /** @description Performance Result Id */
                resultID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Performance Profile results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id?: string;
                        name?: string;
                        /** Format: date-time */
                        test_start_time?: string;
                        mesh?: string;
                        runner_results?: {
                            [key: string]: string | undefined;
                        };
                        deleted?: boolean;
                        server_metrics?: {
                            [key: string]: string | undefined;
                        };
                        server_board_config?: {
                            [key: string]: string | undefined;
                        };
                        /** Format: uuid */
                        performance_profile?: string;
                        /** Format: date-time */
                        created_at?: string;
                        /** Format: date-time */
                        updated_at?: string;
                    };
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetUserTokens: {
        parameters: {
            query?: {
                /** @description To get OAuth tokens as well */
                isOAuth?: string;
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description user tokens */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        total_count?: number;
                        resultType?: string;
                    }, "resultType"> & {
                        tokens?: {
                            /** Format: uuid */
                            id?: string;
                            /** Format: uuid */
                            user_id?: string;
                            /** @description One of (meshery-cloud, github, google) */
                            provider?: string;
                            access_token?: string;
                            refresh_token?: string;
                            name?: string;
                            purpose?: string;
                            is_oauth?: boolean;
                            /** Format: date-time */
                            created_at?: string;
                            /** Format: date-time */
                            updated_at?: string;
                        }[];
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GenerateToken: {
        parameters: {
            query?: {
                /** @description Name of the resource */
                name?: string;
                /** @description Purpose for which token is generated */
                purpose?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description generated token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    DeleteUserTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: string | undefined;
                };
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    IssueIndefiniteLifetimeToken: {
        parameters: {
            query: {
                /** @description Remote provider */
                provider: string;
            };
            header?: never;
            path: {
                /** @description User's user_id */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description generated token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    HandleUserInvite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Body for user invite request */
        requestBody: {
            content: {
                "application/json": {
                    /** @description First Name */
                    first_name: string;
                    /** @description Last Name */
                    last_name: string;
                    /**
                     * Format: email
                     * @description email
                     */
                    email: string;
                };
            };
        };
        responses: {
            /** @description Invitation sent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    UpdateUserPreference: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Body for upserting user preferences */
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: string | undefined;
                };
            };
        };
        responses: {
            /** @description Preferences updated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetUserKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns user keys based on roles assigned to user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        keys?: {
                            /** Format: uuid */
                            ID?: string;
                            subcategory?: string;
                            function?: string;
                            /** Format: date-time */
                            created_at?: string;
                            /** Format: date-time */
                            updated_at?: string;
                            /** @description SQL null Timestamp to handle null values of time. */
                            deleted_at?: string;
                            category?: string;
                            description?: string;
                            /** Format: uuid */
                            owner?: string;
                        }[];
                        total_count?: number;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User's user_id */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns user with given user_id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id: string;
                        /** @description user's email or username */
                        user_id: string;
                        /** @description One of (meshery-cloud, github, google) */
                        provider: string;
                        /**
                         * Format: email
                         * @description email
                         */
                        email: string;
                        /** @description First Name */
                        first_name: string;
                        /** @description Last Name */
                        last_name: string;
                        /** @description Link for profile picture */
                        avatar_url?: string;
                        status: string;
                        bio?: string;
                        preferences?: {
                            [key: string]: string | undefined;
                        };
                        accepted_terms_at?: string;
                        /** Format: date-time */
                        first_login_time?: string;
                        /** Format: date-time */
                        last_login_time: string;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    DeleteUsers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Defines on whom the delete operation is to be performed */
                delete_on: "self" | "bulk";
            };
            cookie?: never;
        };
        /** @description Body for delete of user accounts */
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    user_ids: string;
                    user_emails: string[];
                } | Record<string, never>;
            };
        };
        responses: {
            /** @description created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    DeleteUserAccountById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User's user_id */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetRoleHolders: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
                /** @description Get filtered reponses */
                filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all user with pagination */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (Omit<{
                        page?: number;
                        page_size?: number;
                        records_total?: number;
                        recordType?: string;
                    }, "recordType"> & {
                        data?: {
                            /** Format: uuid */
                            id: string;
                            /** @description user's email or username */
                            user_id: string;
                            username: string;
                            /**
                             * Format: email
                             * @description email
                             */
                            email: string;
                            /** @description First Name */
                            first_name: string;
                            /** @description Last Name */
                            last_name: string;
                            status: string;
                            role_names: string[];
                            /** Format: date-time */
                            created_at: string;
                            /** Format: date-time */
                            updated_at: string;
                            /** Format: date-time */
                            last_login_time: string;
                            /** Format: date-time */
                            deleted_at: string;
                            prefs?: {
                                welcome_email?: boolean;
                                notify_role_change?: boolean;
                            };
                            /** @description Link for profile picture */
                            avatar_url?: string;
                            preferences?: {
                                [key: string]: string | undefined;
                            };
                        }[];
                    }) | (Omit<{
                        page?: number;
                        page_size?: number;
                        records_total?: number;
                        recordType?: string;
                    }, "recordType"> & {
                        data?: {
                            /** Format: uuid */
                            id: string;
                            /** @description user's email or username */
                            user_id: string;
                            username: string;
                            /**
                             * Format: email
                             * @description email
                             */
                            email: string;
                            /** @description First Name */
                            first_name: string;
                            /** @description Last Name */
                            last_name: string;
                            status: string;
                            role_names: string[];
                            /** Format: date-time */
                            joined_at: string;
                            /** Format: date-time */
                            updated_at: string;
                            /** Format: date-time */
                            last_login_time: string;
                            /** Format: date-time */
                            deleted_at: string;
                            prefs?: {
                                welcome_email?: boolean;
                                notify_role_change?: boolean;
                            };
                            /** @description Link for profile picture */
                            avatar_url?: string;
                        }[];
                    });
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetUsers: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: string;
                /** @description Get reponses by pageSize */
                page_size?: string;
                /** @description Get responses that match search param value */
                search?: string;
                /** @description Get ordered responses */
                order?: string;
                /** @description Get filtered reponses */
                filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all user with pagination */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Omit<{
                        page?: number;
                        page_size?: number;
                        records_total?: number;
                        recordType?: string;
                    }, "recordType"> & {
                        data?: {
                            /** Format: uuid */
                            id: string;
                            /** @description user's email or username */
                            user_id: string;
                            username: string;
                            /**
                             * Format: email
                             * @description email
                             */
                            email: string;
                            /** @description First Name */
                            first_name: string;
                            /** @description Last Name */
                            last_name: string;
                            prefs?: {
                                welcome_email?: boolean;
                                notify_role_change?: boolean;
                            };
                            /** @description Link for profile picture */
                            avatar_url?: string;
                            preferences?: {
                                [key: string]: string | undefined;
                            };
                        }[];
                    };
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetUserProfileById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns user with given id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id: string;
                        /** @description user's email or username */
                        user_id: string;
                        /** @description One of (meshery-cloud, github, google) */
                        provider: string;
                        /**
                         * Format: email
                         * @description email
                         */
                        email: string;
                        /** @description First Name */
                        first_name: string;
                        /** @description Last Name */
                        last_name: string;
                        /** @description Link for profile picture */
                        avatar_url?: string;
                        status: string;
                        bio?: string;
                        preferences?: {
                            [key: string]: string | undefined;
                        };
                        accepted_terms_at?: string;
                        /** Format: date-time */
                        first_login_time?: string;
                        /** Format: date-time */
                        last_login_time: string;
                    };
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description user details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id: string;
                        /** @description user's email or username */
                        user_id: string;
                        /** @description One of (meshery-cloud, github, google) */
                        provider: string;
                        /**
                         * Format: email
                         * @description email
                         */
                        email: string;
                        /** @description First Name */
                        first_name: string;
                        /** @description Last Name */
                        last_name: string;
                        /** @description Link for profile picture */
                        avatar_url?: string;
                        status: string;
                        bio?: string;
                        preferences?: {
                            [key: string]: string | undefined;
                        };
                        accepted_terms_at?: string;
                        /** Format: date-time */
                        first_login_time?: string;
                        /** Format: date-time */
                        last_login_time: string;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    UpdateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Body for upserting user */
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    id: string;
                    /** @description user's email or username */
                    user_id: string;
                    /** @description One of (meshery-cloud, github, google) */
                    provider: string;
                    /**
                     * Format: email
                     * @description email
                     */
                    email: string;
                    /** @description First Name */
                    first_name: string;
                    /** @description Last Name */
                    last_name: string;
                    /** @description Link for profile picture */
                    avatar_url?: string;
                    status: string;
                    bio?: string;
                    preferences?: {
                        [key: string]: string | undefined;
                    };
                    accepted_terms_at?: string;
                    /** Format: date-time */
                    first_login_time?: string;
                    /** Format: date-time */
                    last_login_time: string;
                };
            };
        };
        responses: {
            /** @description created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetProfileOverview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description user account overview */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        k8s_count?: number;
                        app_count?: number;
                        pattern_count?: number;
                    };
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetUserActivity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description user activity */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        recent_activity?: {
                            /**
                             * Format: uuid
                             * @description UUID of the event.
                             *
                             */
                            id: string;
                            /**
                             * Format: uuid
                             * @description UUID of the user that initiated the event. In most cases this would be present, but not always.
                             *
                             */
                            user_id?: string;
                            /**
                             * Format: uuid
                             * @description The system from which the request is sourced. In the case of Meshery Server,
                             *     the ID is meshery_instance_id of Meshery Server (which can be found in the metadata of`Connections` table).
                             *
                             */
                            system_id: string;
                            /**
                             * Format: uuid
                             * @description Each Event will have a OperationID. This field is never NULL, which is to say an operation can result in series of events, for eg: Different stages of Pattern Engine / activities of Workflow engine. Each operation (and sub-operation) will have a different operation ID.
                             *
                             */
                            operation_id: string;
                            /**
                             * @description Resource name on which the operation is invoked.
                             *
                             * @example pattern
                             */
                            category: string;
                            /**
                             * @description Action taken on the resource.
                             *
                             * @example deployed
                             */
                            action: string;
                            /**
                             * @description Status for the event.
                             *
                             * @enum {string}
                             */
                            status: "read" | "unread";
                            /**
                             * Format: uuid
                             * @description UUID of the entity on which the event was performed.
                             *
                             * @example 110020-123230-434231-000213
                             */
                            acted_upon: string;
                            /**
                             * @description A summary/receipt of event that occured.
                             *
                             * @example “Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.
                             */
                            description: string;
                            /**
                             * @description A set of seven standard event levels.
                             *
                             * @example info
                             * @enum {string}
                             */
                            severity: "emergency" | "critical" | "alert" | "error" | "warning" | "debug" | "informational" | "success";
                            /** @description Contains meaningful information, specific to the type of event.
                             *     Structure of metadata can be different for different events.
                             *      */
                            metadata: Record<string, never>;
                            /**
                             * Format: date-time
                             * @description Timestamp when the resource was created.
                             */
                            created_at: string;
                            /**
                             * Format: date-time
                             * @description Timestamp when the resource was updated.
                             */
                            updated_at: string;
                            /**
                             * Format: date-time
                             * @description Timestamp when the resource was deleted.
                             */
                            deleted_at?: string;
                        }[];
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetRecentlyOnlineUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description active users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        id?: string;
                        /** @description First Name */
                        first_name?: string;
                        /** @description Last Name */
                        last_name?: string;
                        /** @description Link for profile picture */
                        avatar_url?: string;
                    }[];
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    GetAvailableBadges: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Badges */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        badges?: {
                            [key: string]: {
                                /** Format: uuid */
                                id?: string;
                                name?: string;
                                description?: string;
                                label?: string;
                                svg_location?: string;
                                /** Format: date-time */
                                created_at?: string;
                                /** Format: date-time */
                                updated_at?: string;
                                /** @description SQL null Timestamp to handle null values of time. */
                                deleted_at?: string;
                            } | undefined;
                        };
                        total_count?: number;
                    };
                };
            };
            /** @description Invalid request body or request param */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Expired JWT token used or insufficient privilege */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
}
